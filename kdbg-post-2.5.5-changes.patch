diff --git a/kdbg.spec b/kdbg.spec
index 560edcc..13fd77f 100644
--- a/kdbg.spec
+++ b/kdbg.spec
@@ -49,10 +49,8 @@ rm -rf $RPM_BUILD_ROOT
 make DESTDIR=$RPM_BUILD_ROOT install
 
 cd $RPM_BUILD_ROOT
-find . -type d | sed '1,2d;s,^\.,\%attr(-\,root\,root) \%dir ,' > \
-	$RPM_BUILD_DIR/file.list.%{name}
 find . -type f | sed -e 's,^\.,\%attr(-\,root\,root) ,' \
-	-e '/\/config\//s|^|%config|' >> \
+	-e '/\/config\//s|^|%config|' > \
 	$RPM_BUILD_DIR/file.list.%{name}
 find . -type l | sed 's,^\.,\%attr(-\,root\,root) ,' >> \
 	$RPM_BUILD_DIR/file.list.%{name}
diff --git a/kdbg/dbgdriver.h b/kdbg/dbgdriver.h
index db6ed62..e9c573b 100644
--- a/kdbg/dbgdriver.h
+++ b/kdbg/dbgdriver.h
@@ -70,6 +70,7 @@ enum DbgCommand {
 	DCfinish,
 	DCuntil,			/* line number is zero-based! */
 	DCkill,
+	DCdetach,
 	DCbreaktext,
 	DCbreakline,			/* line number is zero-based! */
 	DCtbreakline,			/* line number is zero-based! */
@@ -83,6 +84,7 @@ enum DbgCommand {
 	DCprintDeref,
 	DCprintStruct,
 	DCprintQStringStruct,
+	DCprintPopup,
 	DCframe,
 	DCfindType,
 	DCinfosharedlib,
@@ -155,6 +157,8 @@ struct CmdQueueItem
     int m_existingBrkpt;
     // whether command was emitted due to direct user request (only set when relevant)
     bool m_byUser;
+    // used to store the expression to print in case of DCprintPopup is executed
+    QString m_popupExpr;
 
     CmdQueueItem(DbgCommand cmd, const QString& str) :
     	m_cmd(cmd),
diff --git a/kdbg/dbgmainwnd.cpp b/kdbg/dbgmainwnd.cpp
index e3d6232..17653b2 100644
--- a/kdbg/dbgmainwnd.cpp
+++ b/kdbg/dbgmainwnd.cpp
@@ -333,6 +333,8 @@ void DebuggerMainWnd::initKAction()
 			m_debugger, SLOT(programRunAgain()), "exec_restart");
     m_attachAction = createAction(i18n("A&ttach..."), 0,
 			this, SLOT(slotExecAttach()), "exec_attach");
+    m_detachAction = createAction(i18n("&Detach"), 0,
+			m_debugger, SLOT(programDetach()), "exec_detach");
     m_argumentsAction = createAction(i18n("&Arguments..."), 0,
 			this, SLOT(slotExecArgs()), "exec_arguments");
 
@@ -515,6 +517,7 @@ void DebuggerMainWnd::updateUI()
     m_execMovePCAction->setEnabled(m_debugger->canSingleStep());
     m_restartAction->setEnabled(m_debugger->canSingleStep());
     m_attachAction->setEnabled(m_debugger->isReady());
+    m_detachAction->setEnabled(m_debugger->canSingleStep());
     m_runAction->setEnabled(m_debugger->canStart() || m_debugger->canSingleStep());
     m_killAction->setEnabled(m_debugger->haveExecutable() && m_debugger->isProgramActive());
     m_breakAction->setEnabled(m_debugger->isProgramRunning());
diff --git a/kdbg/dbgmainwnd.h b/kdbg/dbgmainwnd.h
index 9d5531e..149446f 100644
--- a/kdbg/dbgmainwnd.h
+++ b/kdbg/dbgmainwnd.h
@@ -105,6 +105,7 @@ protected:
     QAction* m_killAction;
     QAction* m_restartAction;
     QAction* m_attachAction;
+    QAction* m_detachAction;
     QAction* m_argumentsAction;
     QAction* m_bpSetAction;
     QAction* m_bpSetTempAction;
diff --git a/kdbg/debugger.cpp b/kdbg/debugger.cpp
index c09903f..6a6d243 100644
--- a/kdbg/debugger.cpp
+++ b/kdbg/debugger.cpp
@@ -24,6 +24,36 @@
 #include <algorithm>
 #include "mydebug.h"
 
+/**
+ * Returns expression value for a tooltip.
+ */
+template <class T>
+QString formatPopupValue(const T* v)
+{
+    QString tip;
+
+    if (!v->value().isEmpty())
+    {
+        tip += v->value();
+    }
+    else
+    {
+	// no value: we use some hint
+        switch (v->m_varKind) {
+        case VarTree::VKstruct:
+            tip += "{...}";
+            break;
+        case VarTree::VKarray:
+            tip += "[...]";
+            break;
+        default:
+            tip += "?""?""?";	// 2 question marks in a row would be a trigraph
+            break;
+        }
+    }
+
+    return tip;
+}
 
 KDebugger::KDebugger(QWidget* parent,
 		     ExprWnd* localVars,
@@ -280,6 +310,18 @@ void KDebugger::programKill()
     }
 }
 
+void KDebugger::programDetach()
+{
+    if (haveExecutable() && isProgramActive()) {
+	if (m_programRunning) {
+	    m_d->interruptInferior();
+	}
+	// this is an emergency command; flush queues
+	m_d->flushCommands(true);
+	m_d->executeCmd(DCdetach, true);
+    }
+}
+
 bool KDebugger::runUntil(const QString& fileName, int lineNo)
 {
     if (isReady() && m_programActive && !m_programRunning) {
@@ -1072,6 +1114,9 @@ void KDebugger::parse(CmdQueueItem* cmd, const char* output)
     case DCprint:
 	handlePrint(cmd, output);
 	break;
+    case DCprintPopup:
+	handlePrintPopup(cmd, output);
+	break;
     case DCprintDeref:
 	handlePrintDeref(cmd, output);
 	break;
@@ -1090,6 +1135,7 @@ void KDebugger::parse(CmdQueueItem* cmd, const char* output)
 	handleRunCommands(output);
 	break;
     case DCkill:
+    case DCdetach:
 	m_programRunning = m_programActive = false;
 	// erase PC
 	emit updatePC(QString(), -1, DbgAddr(), 0);
@@ -1403,6 +1449,21 @@ bool KDebugger::handlePrint(CmdQueueItem* cmd, const char* output)
     return true;
 }
 
+bool KDebugger::handlePrintPopup(CmdQueueItem* cmd, const char* output)
+{
+    ExprValue* value = m_d->parsePrintExpr(output, false);
+    if (value == 0)
+	return false;
+
+    TRACE("<" + cmd->m_popupExpr + "> = " + value->m_value);
+
+    // construct the tip, m_popupExpr contains the variable name
+    QString tip = cmd->m_popupExpr + " = " + formatPopupValue(value);
+    emit valuePopup(tip);
+
+    return true;
+}
+
 bool KDebugger::handlePrintDeref(CmdQueueItem* cmd, const char* output)
 {
     ASSERT(cmd->m_expr != 0);
@@ -2030,33 +2091,18 @@ void KDebugger::slotValuePopup(const QString& expr)
 	    if (v != 0)
 		v = ExprWnd::ptrMemberByName(v, expr);
 	    if (v == 0) {
-		// nothing found; do nothing
+		// nothing found, try printing variable in gdb
+
+                CmdQueueItem *cmd = m_d->executeCmd(DCprintPopup, expr, false);
+                cmd->m_popupExpr = expr;
+
 		return;
 	    }
 	}
     }
 
     // construct the tip
-    QString tip = v->getText() + " = ";
-    if (!v->value().isEmpty())
-    {
-	tip += v->value();
-    }
-    else
-    {
-	// no value: we use some hint
-	switch (v->m_varKind) {
-	case VarTree::VKstruct:
-	    tip += "{...}";
-	    break;
-	case VarTree::VKarray:
-	    tip += "[...]";
-	    break;
-	default:
-	    tip += "?""?""?";	// 2 question marks in a row would be a trigraph
-	    break;
-	}
-    }
+    QString tip = v->getText() + " = " + formatPopupValue(v);
     emit valuePopup(tip);
 }
 
diff --git a/kdbg/debugger.h b/kdbg/debugger.h
index 487dd34..536573b 100644
--- a/kdbg/debugger.h
+++ b/kdbg/debugger.h
@@ -135,6 +135,11 @@ public slots:
     void programKill();
 
     /**
+     * Detach the program (continues exection outside debugger).
+     */
+    void programDetach();
+
+    /**
      * Interrupts the program if it is currently running.
      */
     void programBreak();
@@ -369,6 +374,7 @@ protected:
     void parseLocals(const char* output, std::list<ExprValue*>& newVars);
     void handleLocals(const char* output);
     bool handlePrint(CmdQueueItem* cmd, const char* output);
+    bool handlePrintPopup(CmdQueueItem* cmd, const char* output);
     bool handlePrintDeref(CmdQueueItem* cmd, const char* output);
     void handleBacktrace(const char* output);
     void handleFrameChange(const char* output);
diff --git a/kdbg/exprwnd.h b/kdbg/exprwnd.h
index 7e7ecd2..f08f4ed 100644
--- a/kdbg/exprwnd.h
+++ b/kdbg/exprwnd.h
@@ -86,6 +86,10 @@ struct ExprValue
     ExprValue(const QString& name, VarTree::NameKind kind);
     ~ExprValue();
 
+    const QString& value() const {
+        return m_value;
+    }
+
     void appendChild(ExprValue* newChild);
     int childCount() const;
 };
diff --git a/kdbg/gdbdriver.cpp b/kdbg/gdbdriver.cpp
index 26d4e1d..f156713 100644
--- a/kdbg/gdbdriver.cpp
+++ b/kdbg/gdbdriver.cpp
@@ -95,6 +95,7 @@ static GdbCmdInfo cmds[] = {
     { DCfinish, "finish\n", GdbCmdInfo::argNone },
     { DCuntil, "until %s:%d\n", GdbCmdInfo::argStringNum },
     { DCkill, "kill\n", GdbCmdInfo::argNone },
+    { DCdetach, "detach\n", GdbCmdInfo::argNone },
     { DCbreaktext, "break %s\n", GdbCmdInfo::argString },
     { DCbreakline, "break %s:%d\n", GdbCmdInfo::argStringNum },
     { DCtbreakline, "tbreak %s:%d\n", GdbCmdInfo::argStringNum },
@@ -108,6 +109,7 @@ static GdbCmdInfo cmds[] = {
     { DCprintDeref, "print *(%s)\n", GdbCmdInfo::argString },
     { DCprintStruct, "print %s\n", GdbCmdInfo::argString },
     { DCprintQStringStruct, printQStringStructFmt, GdbCmdInfo::argString},
+    { DCprintPopup, "print %s\n", GdbCmdInfo::argString },
     { DCframe, "frame %d\n", GdbCmdInfo::argNum },
     { DCfindType, "whatis %s\n", GdbCmdInfo::argString },
     { DCinfosharedlib, "info sharedlibrary\n", GdbCmdInfo::argNone },
diff --git a/kdbg/kdbgui.rc b/kdbg/kdbgui.rc
index 5d93a80..2f2dd4b 100644
--- a/kdbg/kdbgui.rc
+++ b/kdbg/kdbgui.rc
@@ -36,6 +36,7 @@
     <Action name="exec_kill"/>
     <Action name="exec_restart"/>
     <Action name="exec_attach"/>
+    <Action name="exec_detach"/>
     <Separator/>
     <Action name="exec_arguments"/>
   </Menu>
diff --git a/kdbg/sourcewnd.cpp b/kdbg/sourcewnd.cpp
index d5e2a72..a28901c 100644
--- a/kdbg/sourcewnd.cpp
+++ b/kdbg/sourcewnd.cpp
@@ -429,6 +429,38 @@ void SourceWindow::keyPressEvent(QKeyEvent* ev)
     }
 }
 
+QString SourceWindow::extendExpr(const QString &plainText,
+                                 int            wordStart,
+                                 int            wordEnd)
+{
+    QString document = plainText.left(wordEnd);
+    QString word     = plainText.mid(wordStart, wordEnd - wordStart);
+    QRegExp regex    = QRegExp("(::)?([A-Za-z_]{1}\\w*\\s*(->|\\.|::)\\s*)*" + word + "$");
+
+    #define IDENTIFIER_MAX_SIZE 256
+    // cut the document to reduce size of string to scan
+    // because of this only identifiefs of length <= IDENTIFIER_MAX_SIZE are supported
+    if (document.length() > IDENTIFIER_MAX_SIZE) {
+        document.right(IDENTIFIER_MAX_SIZE);
+    }
+
+    const int index = regex.indexIn(document);
+
+    if (index == -1)
+    {
+        TRACE("No match, returning " + word);
+    }
+    else
+    {
+        const int length = regex.matchedLength();
+
+        word = plainText.mid(index, length);
+        TRACE("Matched, returning " + word);
+    }
+
+    return word;
+}
+
 bool SourceWindow::wordAtPoint(const QPoint& p, QString& word, QRect& r)
 {
     QTextCursor cursor = cursorForPosition(viewport()->mapFrom(this, p));
@@ -442,11 +474,32 @@ bool SourceWindow::wordAtPoint(const QPoint& p, QString& word, QRect& r)
 	return false;
 
     // keep only letters and digits
-    QRegExp w("[\\dA-Za-z_]+");
+    QRegExp w("[A-Za-z_]{1}[\\dA-Za-z_]*");
     if (w.indexIn(word) < 0)
 	return false;
+
     word = w.cap();
 
+    if (m_highlighter)
+    {
+        // if cpp highlighter is enabled - c/c++ file is being displayed
+
+        // check that word is not a c/c++ keyword
+        if (m_highlighter->isCppKeyword(word))
+            return false;
+
+        // TODO check that cursor is on top of a string literal
+        //      and don't display any tooltips in this case
+
+        // try to extend selected word under the cursor to get a full variable name
+        word = extendExpr(cursor.document()->toPlainText(),
+                          cursor.selectionStart(),
+                          cursor.selectionEnd());
+
+        if (word.isEmpty())
+            return false;
+    }
+
     r = QRect(p, p);
     r.adjust(-5,-5,5,5);
     return true;
@@ -820,8 +873,8 @@ static const QString ckw[] =
     "private",
     "protected",
     "public",
-    "reinterpret_cast",
     "register",
+    "reinterpret_cast",
     "return",
     "short",
     "signed",
@@ -838,9 +891,9 @@ static const QString ckw[] =
     "typedef",
     "typeid",
     "typename",
-    "using",
     "union",
     "unsigned",
+    "using",
     "virtual",
     "void",
     "volatile",
@@ -917,8 +970,7 @@ int HighlightCpp::highlight(const QString& text, int state)
 		    break;
 	    }
 	    state = 0;
-	    if (std::binary_search(ckw, ckw + sizeof(ckw)/sizeof(ckw[0]),
-			text.mid(start, end-start)))
+	    if (isCppKeyword(text.mid(start, end-start)))
 	    {
 		setFormat(start, end-start, identFont);
 	    } else {
@@ -960,4 +1012,24 @@ int HighlightCpp::highlight(const QString& text, int state)
     return state;
 }
 
+bool HighlightCpp::isCppKeyword(const QString& word)
+{
+#ifndef NDEBUG
+    // std::binary_search requires the search list to be sorted
+    static bool keyword_order_verified = false;
+    if (!keyword_order_verified) {
+	for (size_t i = 1; i < sizeof(ckw)/sizeof(ckw[0]); ++i) {
+	    if (ckw[i-1] > ckw[i]) {
+		qDebug("\"%s\" > \"%s\"",
+		       qPrintable(ckw[i-1]), qPrintable(ckw[i]));
+		assert(0);
+	    }
+	}
+	keyword_order_verified = true;
+    }
+#endif
+
+    return std::binary_search(ckw, ckw + sizeof(ckw)/sizeof(ckw[0]), word);
+}
+
 #include "sourcewnd.moc"
diff --git a/kdbg/sourcewnd.h b/kdbg/sourcewnd.h
index 9f29940..8224245 100644
--- a/kdbg/sourcewnd.h
+++ b/kdbg/sourcewnd.h
@@ -54,6 +54,9 @@ public:
 
     void activeLine(int& lineNo, DbgAddr& address);
 
+    static QString extendExpr(const QString &plainText,
+                              int            wordStart,
+                              int            wordEnd);
 protected:
     void drawLineInfoArea(QPainter* p, QPaintEvent* event);
     void infoMousePress(QMouseEvent* ev);
@@ -134,6 +137,8 @@ public:
     HighlightCpp(SourceWindow* srcWnd);
     virtual void highlightBlock(const QString& text);
     int highlight(const QString& text, int state);
+
+    static bool isCppKeyword(const QString& word);
 };
 
 #endif // SOURCEWND_H
diff --git a/kdbg/testprogs/.gitignore b/kdbg/testprogs/.gitignore
index f93b7f0..d3f8e82 100644
--- a/kdbg/testprogs/.gitignore
+++ b/kdbg/testprogs/.gitignore
@@ -10,4 +10,5 @@ repeats
 std
 templates
 testfile
+tooltips
 widechar
diff --git a/kdbg/testprogs/Makefile b/kdbg/testprogs/Makefile
index 210b38a..e56f581 100644
--- a/kdbg/testprogs/Makefile
+++ b/kdbg/testprogs/Makefile
@@ -17,6 +17,7 @@ PROGS = \
 	std \
 	templates \
 	testfile \
+	tooltips \
 	widechar
 
 all: $(PROGS)
@@ -57,6 +58,9 @@ templates: templates.cpp
 testfile: testfile.cpp
 	g++ -o $@ $(CXXFLAGS) $^ $(QT3INC) $(QT3LIB)
 
+tooltips: tooltips.cpp
+	g++ -o $@ $(CXXFLAGS) $^
+
 widechar: widechar.cpp
 	g++ -o $@ $(CXXFLAGS) $^
 
diff --git a/kdbg/testprogs/tooltips.cpp b/kdbg/testprogs/tooltips.cpp
new file mode 100644
index 0000000..a597e4a
--- /dev/null
+++ b/kdbg/testprogs/tooltips.cpp
@@ -0,0 +1,98 @@
+#include <iostream>
+
+struct B
+{
+    int c;
+};
+
+struct S
+{
+    int i;   /* to overlap local i variable */
+    int i_i;
+    int i1;
+    int _i;
+    int j;
+
+    static int f;
+
+    B*  pb;
+};
+
+int S::f = 5;
+
+int g_i = 5;
+
+class C
+{
+    int m_i;
+
+public:
+    C() : m_i(0) { }
+
+    int get_i() { return m_i; }
+};
+
+namespace inner {
+    int g_i = 2;
+
+    void test()
+    {
+        int g_i = 0;
+
+        for (int i = 0; i < ::g_i; ++i)
+        {
+            g_i += i + inner::g_i + ::S::f;
+        }
+
+	C  c;
+	C *pc = &c;
+
+	int i1 = c.get_i();
+	i1 = pc->get_i();
+    }
+}
+
+int main(int /* argc */, char ** /* argv */)
+{
+    std::cout << "Started..." << std::endl;
+
+    inner::test();
+
+    S  s  = { 0, 0, 0, 0, 0, 0 };
+    s.pb = new B;
+    s.pb->c = 0;
+
+    S *ps = &s;
+
+    char a = 'a';
+    const char *b = "b";
+    b = &a;
+
+    const unsigned int i_max = 0 - 1;
+    for (unsigned int i = 0; i < i_max; ++i)
+    {
+        if (i % 1000000 == 0)
+            std::cout << i << s.i << s.i_i << s.j << ps->j << std::endl;
+
+        s.i     = i;
+        s.i_i   = s.i   + 10;
+        s.i1    = s.i_i + 20;
+        s._i    = s.i1  + s.i_i;
+        s.j     = s._i;
+
+        s.pb->c = i + 1;
+
+        ps->j     = ps->j + 1;
+        ps->pb->c = i + 2;
+
+        S::f += 1;
+
+        // these constructions are still not supported
+        (*ps).i = (*ps).i + 1;
+        (&s)->i = (&s)->i + (&s)->i_i;
+    }
+
+    std::cout << "Finished" << std::endl;
+
+    return 0;
+}
diff --git a/kdbg/xsldbgdriver.cpp b/kdbg/xsldbgdriver.cpp
index c919e11..5587da5 100644
--- a/kdbg/xsldbgdriver.cpp
+++ b/kdbg/xsldbgdriver.cpp
@@ -74,6 +74,7 @@ static XsldbgCmdInfo cmds[] = {
     {DCfinish, "stepup\n", XsldbgCmdInfo::argNone},
     {DCuntil, "continue %s:%d\n", XsldbgCmdInfo::argStringNum},
     {DCkill, "quit\n", XsldbgCmdInfo::argNone},
+    {DCdetach, "quit\n", XsldbgCmdInfo::argNone},
     {DCbreaktext, "break %s\n", XsldbgCmdInfo::argString},
     {DCbreakline, "break -l %s %d\n", XsldbgCmdInfo::argStringNum},
     {DCtbreakline, "break -l %s %d\n", XsldbgCmdInfo::argStringNum },
@@ -87,6 +88,7 @@ static XsldbgCmdInfo cmds[] = {
     {DCprintDeref, "print 'print (*%s)'\n", XsldbgCmdInfo::argString},
     {DCprintStruct, "print 'print %s'\n", XsldbgCmdInfo::argString},
     {DCprintQStringStruct, "print 'print %s'\n", XsldbgCmdInfo::argString},
+    {DCprintPopup, "print %s\n", XsldbgCmdInfo::argString},
     {DCframe, "frame %d\n", XsldbgCmdInfo::argNum},
     {DCfindType, "print 'whatis %s'\n", XsldbgCmdInfo::argString},
     {DCinfosharedlib, "stylesheets\n", XsldbgCmdInfo::argNone},
